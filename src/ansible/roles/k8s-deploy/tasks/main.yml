---
- name: Debug variables
  debug:
    msg:
      - "IMAGE_TAG env var: '{{ lookup('env', 'IMAGE_TAG') }}'"
      - "Git SHA: '{{ lookup('pipe', 'git rev-parse HEAD') }}'"
      - "Current working directory: '{{ lookup('pipe', 'pwd') }}'"

- name: Show what image we're about to deploy
  debug:
    msg: "About to deploy image: gcr.io/tennis-match-predictor/api:{{ lookup('env', 'IMAGE_TAG') }}"

- name: Create default namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: default

- name: Create ConfigMap for environment variables
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: tennis-env
        namespace: default
      data:
        ENV: "prod"
        PORT: "8000"
        API_PORT: "8000"
        MODEL_PORT: "8001"
        MODEL_HOST: "probability-model"
        LLM_PORT: "8002"
        LLM_HOST: "llm"
        OLLAMA_HOST: "ollama"
        GCP_PROJECT: "tennis-match-predictor"
        GCP_ZONE: "us-central1-a"
        GCS_BUCKET_NAME: "msmballstars-data"
        DATA_FOLDER: "version1"
        DATA_FILE: "combined_atp_matches.csv"

# Services
- name: Create API Service
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: api
        namespace: default
      spec:
        selector:
          app: api
        ports:
          - protocol: TCP
            port: 8000
            targetPort: 8000
        type: LoadBalancer

- name: Create Probability Model Service
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: probability-model
        namespace: default
      spec:
        selector:
          app: probability-model
        ports:
          - protocol: TCP
            port: 8001
            targetPort: 8001

- name: Create LLM Service
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: llm
        namespace: default
      spec:
        selector:
          app: llm
        ports:
          - protocol: TCP
            port: 8002
            targetPort: 8002

- name: Create Ollama Service
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: ollama
        namespace: default
      spec:
        selector:
          app: ollama
        ports:
          - protocol: TCP
            port: 11434
            targetPort: 11434

# Managed Certificate
- name: Create Managed Certificate
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: networking.gke.io/v1
      kind: ManagedCertificate
      metadata:
        name: managed-cert
        namespace: default
      spec:
        domains:
          - tennis-match-predictor.claycoleman.us

# Ingress
# this still isnt' working because of "backend" issues, not sure
- name: Create Ingress
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: managed-cert-ingress
        namespace: default
        annotations:
          kubernetes.io/ingress.global-static-ip-name: api-ip
          networking.gke.io/managed-certificates: managed-cert
          kubernetes.io/ingress.class: "gce"
      spec:
        rules:
          - host: tennis-match-predictor.claycoleman.us
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: api
                      port:
                        number: 8000
        tls:
          - hosts:
              - tennis-match-predictor.claycoleman.us

# Deployments (API, Probability Model, LLM, Ollama)
- name: Deploy API
  kubernetes.core.k8s:
    state: present
    force: true
    namespace: default
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: api
        annotations:
          kubernetes.io/change-cause: "Deploy {{ lookup('env', 'IMAGE_TAG') }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: api
        template:
          metadata:
            labels:
              app: api
            annotations:
              rollme: "{{ lookup('env', 'IMAGE_TAG') }}"
          spec:
            containers:
              - name: api
                image: "gcr.io/tennis-match-predictor/api:{{ lookup('env', 'IMAGE_TAG') }}"
                ports:
                  - containerPort: 8000
                env:
                  - name: PORT
                    valueFrom:
                      configMapKeyRef:
                        name: tennis-env
                        key: API_PORT
                envFrom:
                  - configMapRef:
                      name: tennis-env
                volumeMounts:
                  - mountPath: /secrets
                    name: gcp-key
                    readOnly: true
                imagePullPolicy: Always
            volumes:
              - name: gcp-key
                secret:
                  secretName: gcp-credentials

- name: Deploy Probability Model
  kubernetes.core.k8s:
    state: present
    force: true
    namespace: default
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: probability-model
        annotations:
          kubernetes.io/change-cause: "Deploy {{ lookup('env', 'IMAGE_TAG') }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: probability-model
        template:
          metadata:
            labels:
              app: probability-model
            annotations:
              rollme: "{{ lookup('env', 'IMAGE_TAG') }}"
          spec:
            containers:
              - name: probability-model
                image: "gcr.io/tennis-match-predictor/probability-model:{{ lookup('env', 'IMAGE_TAG') }}"
                ports:
                  - containerPort: 8001
                # solution may be here
                resources:
                  requests:
                    memory: "2Gi"
                  limits:
                    memory: "3Gi"
                env:
                  - name: PORT
                    valueFrom:
                      configMapKeyRef:
                        name: tennis-env
                        key: MODEL_PORT
                  - name: DATA_FILE
                    value: "training_data_lookback=10.pkl"
                  - name: WEIGHTS_FILE
                    value: "prob_model.pt"
                  - name: HIDDEN_SIZE
                    value: "32"
                  - name: NUM_LAYERS
                    value: "2"
                  - name: CUDA_VISIBLE_DEVICES
                    value: ""
                  - name: TORCH_DEVICE
                    value: "cpu"
                envFrom:
                  - configMapRef:
                      name: tennis-env
                volumeMounts:
                  - mountPath: /secrets
                    name: gcp-key
                    readOnly: true
                imagePullPolicy: Always
            volumes:
              - name: gcp-key
                secret:
                  secretName: gcp-credentials
            affinity:
              nodeAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  nodeSelectorTerms:
                    - matchExpressions:
                        - key: kubernetes.io/hostname
                          operator: In
                          values:
                            - gke-tennis-predictor-clu-default-pool-0580d898-vh3j

- name: Deploy LLM
  kubernetes.core.k8s:
    state: present
    force: true
    namespace: default
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: llm
        annotations:
          kubernetes.io/change-cause: "Deploy {{ lookup('env', 'IMAGE_TAG') }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: llm
        template:
          metadata:
            labels:
              app: llm
            annotations:
              rollme: "{{ lookup('env', 'IMAGE_TAG') }}"
          spec:
            containers:
              - name: llm
                image: "gcr.io/tennis-match-predictor/llm:{{ lookup('env', 'IMAGE_TAG') }}"
                ports:
                  - containerPort: 8002
                env:
                  - name: PORT
                    valueFrom:
                      configMapKeyRef:
                        name: tennis-env
                        key: LLM_PORT
                  - name: OLLAMA_HOST
                    valueFrom:
                      configMapKeyRef:
                        name: tennis-env
                        key: OLLAMA_HOST
                envFrom:
                  - configMapRef:
                      name: tennis-env
                volumeMounts:
                  - mountPath: /secrets
                    name: gcp-key
                    readOnly: true
                imagePullPolicy: Always
            volumes:
              - name: gcp-key
                secret:
                  secretName: gcp-credentials

- name: Deploy Ollama
  kubernetes.core.k8s:
    state: present
    force: true
    namespace: default
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ollama
        annotations:
          kubernetes.io/change-cause: "Deploy {{ lookup('env', 'IMAGE_TAG') }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: ollama
        template:
          metadata:
            labels:
              app: ollama
            annotations:
              rollme: "{{ lookup('env', 'IMAGE_TAG') }}"
          spec:
            tolerations:
              - key: "nvidia.com/gpu"
                operator: "Exists"
                effect: "NoSchedule"
            containers:
              - name: ollama
                image: "gcr.io/tennis-match-predictor/ollama:{{ lookup('env', 'IMAGE_TAG') }}"
                ports:
                  - containerPort: 11434
                volumeMounts:
                  - mountPath: /root/.ollama
                    name: ollama-storage
                imagePullPolicy: Always
            volumes:
              - name: ollama-storage
                emptyDir: {}
