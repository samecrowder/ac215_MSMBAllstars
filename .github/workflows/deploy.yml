# the high level structure of this workflow needs to be kept in sync
# with the src/deploy/deploy.sh script. we don't call it directly because we want
# to have parallel builds for each service.
name: Deploy to GKE

on:
  push:
    branches:
      - main
    paths:
      - "src/**"
  workflow_dispatch:

env:
  PROJECT_ID: tennis-match-predictor
  REGION: us-central1
  LLM_MODEL: llama3.2:3b
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            { name: "api", dockerfile: "Dockerfile", path: "src/api", build_args: "" },
            {
              name: "probability-model",
              dockerfile: "Dockerfile",
              path: "src/probability_model",
              build_args: "",
            },
            { name: "llm", dockerfile: "Dockerfile", path: "src/llm", build_args: "" },
            {
              name: "ollama",
              dockerfile: "ollama.Dockerfile",
              path: "src/llm",
              build_args: "--build-arg LLM_MODEL=$LLM_MODEL",
            },
          ]
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker

      - name: Build and Push Container
        run: |
          SERVICE_NAME=${{ matrix.service.name }} \
          DOCKERFILE=${{ matrix.service.dockerfile }} \
          SERVICE_PATH=${{ matrix.service.path }} \
          IMAGE_TAG=${{ github.sha }} \
          BUILD_ARGS="${{ matrix.service.build_args }}" \
          ./src/deploy/docker-build-and-push.sh

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Install GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gcloud components update

      - name: Set up environment
        run: |
          mkdir -p ../secrets
          echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}' > ../secrets/super-admin-key.json
          ls -la ../secrets

      - name: Install Ansible and dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install ansible requests google-auth openshift pyyaml kubernetes
          ansible-galaxy collection install google.cloud kubernetes.core

      - name: Run Ansible Playbook
        env:
          CI: "true"
          USE_GKE_GCLOUD_AUTH_PLUGIN: True
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ./src/deploy/ansible-deploy.sh ${{ env.LLM_MODEL }} ../secrets/super-admin-key.json
